The only file to be modified is process.py 

    def formatchunk(self):
        self.logger.debug(f'Formatting chunk')
        # Currently just a stub, no actual formatting

is to be completed.

The following code is from another project and is for reference only.  We will be doing something similar, but not exacly the same.  
In our case the chunk will be searched for sentences and the leading and trailing spaces in front of and behind of the sentence will be 
replaced by '\n' for each sentence found.  This changesthe chunk by selectively replacing spaces with '\n'  
, 

for reference only as our punctation is different : 

async def punctuate_text(self, text: str) -> str:
        self.logger.info(f"Sending {len(text)} characters to LLM for punctuation")
        prompt = f"""Correct ONLY punctuation and capitalization in this transcript while preserving ALL original content:

{text}

RULES:
1. ONLY add missing punctuation (.!?) and capitalization
2. PRESERVE ALL original words exactly in order
3. Do not change or remove any words
4. Replace connecting dashes with commas or periods
5. Sentences must start with capital and end with .!?
6. Do not add any new words or change word order

Corrected version:"""

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.api_url,
                    json={
                        "prompt": prompt,
                        "max_tokens": MAX_TOKENS,
                        "temperature": TEMPERATURE,
                        "stop": STOP_SEQUENCES,
                        "repetition_penalty": REPETITION_PENALTY,
                        "top_p": TOP_P
                    },
                    timeout=aiohttp.ClientTimeout(total=API_TIMEOUT)
                ) as response:
                    if response.status != 200:
                        self.logger.warning(f"API returned status {response.status}")
                        return text
                    result = await response.json()
                    return result.get("choices", [{}])[0].get("text", text).strip()
        except Exception as e:
            self.logger.error(f"API call failed: {str(e)}")
            return text    async def punctuate_text(self, text: str) -> str:
        self.logger.info(f"Sending {len(text)} characters to LLM for punctuation")
        prompt = f"""Correct ONLY punctuation and capitalization in this transcript while preserving ALL original content:

{text}

RULES:
1. ONLY add missing punctuation (.!?) and capitalization
2. PRESERVE ALL original words exactly in order
3. Do not change or remove any words
4. Replace connecting dashes with commas or periods
5. Sentences must start with capital and end with .!?
6. Do not add any new words or change word order

Corrected version:"""

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.api_url,
                    json={
                        "prompt": prompt,
                        "max_tokens": MAX_TOKENS,
                        "temperature": TEMPERATURE,
                        "stop": STOP_SEQUENCES,
                        "repetition_penalty": REPETITION_PENALTY,
                        "top_p": TOP_P
                    },
                    timeout=aiohttp.ClientTimeout(total=API_TIMEOUT)
                ) as response:
                    if response.status != 200:
                        self.logger.warning(f"API returned status {response.status}")
                        return text
                    result = await response.json()
                    return result.get("choices", [{}])[0].get("text", text).strip()
        except Exception as e:
            self.logger.error(f"API call failed: {str(e)}")
            return text