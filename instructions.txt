
The test.py file is needs to be rewritten.  Only file to be changed is test.py.  The LLM will be debugged using test.py only.  

The test code will read the first 250 words from preprocessed.txt

test.py will test the LLM starting with this.  Add all the imports and extra code to put this functionality into test.py


 async def formatchunk(self, chunktext):

        chunklength = len(chunktext)
        self.logger.debug(f'Formatting chunk of {chunklength} chars')
        prompt = textwrap.dedent(f"""\
            Reformatted this text with proper sentence formatting:

            {chunktext}

            Rules:
            1. Preserve all original words exactly
            2. Only modify spacing characters
            5. Separate sentences with newlines instead of spaces before sentence
            5. Separate sentences with newlines instead of spaces aftter sentence
            6. Maintain original word order
            7. Do not add any new content
            8. Ignore the space replacement rule for space after tthe last word

            Reformatted text:""")

        try:
            async with self.session.post(
                self.api_url,
                json={
                    "prompt": prompt,  # Note: Fix typo here ("prompt" -> "prompt")
                    "max_tokens": MAX_TOKENS,
                    "temperature": TEMPERATURE,
                    "stop": STOP_SEQUENCES,
                    "repetition_penalty": REPETITION_PENALTY,
                    "top_p": TOP_P
                },
                timeout=aiohttp.ClientTimeout(total=API_TIMEOUT)
            ) as response:
                if response.status != 200:
                    error = await response.text()
                    self.logger.warning(f"API error {response.status}: {error}")
                    return chunktext
                
                result = await response.json()
                formatted_text = result.get("choices", [{}])[0].get("text", "").strip()
                
                if not formatted_text:
                    self.logger.warning("Received empty response from API")
                    return chunktext
                
                return formatted_text
                
        except asyncio.TimeoutError:
            self.logger.warning("API request timed out")
            return chunktext
        except Exception as e:
            self.logger.error(f"API call failed: {str(e)}")
            return chunktext



