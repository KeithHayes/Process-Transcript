input:

Alice Warren sat beside a wide window in the corner of her study.
The late afternoon light slanted gently across the hardwood floor, illuminating endless rows of books that lined the walls.
She loved the hush of quiet contemplation, the soft rustle of turning pages, and the subtle comfort of stories held within paper and ink.
It was in this exact space that she found solace after a long day of meetings, presentations, and endless email chains.
The silence was not merely an absence of noise; it was a presence in itself, a companion that whispered in comfortable tones and allowed thoughts to drift unencumbered.
Outside, the garden lay in gentle bloom.
Roses of deep crimson and pale pink nodded in the early breeze, while lavender and thyme filled the afternoon air with fragrant sweetness.
A pair of robins hopped atop the low stone wall, pecking at small insects among the wild clover.
Occasionally, a butterfly orange with black veined wings fluttered past the aging glass, and Alice followed its slow, drifting flight for a moment before returning to her book.
Such ordinary spectacles, when observed with attention, held a profound beauty.
It was a lesson she had learned, early and often: that the marvels of life are seldom grand or flashy; they are small, quiet, and easily overlooked.
Her book, an anthology of short stories from the early twentieth century, lay open on her lap.
The paper was slightly yellowed, but sturdy; the ink, crisp. Each story contained within had been selected for its faithful representation of time, place, and character.
There was a certain charm in the way authors of that era wove descriptive passages around otherwise trivial actions tying shoelaces, pouring tea, gazing out toward a stormy horizon.
Such attentiveness to detail formed a tapestry of everyday life, and it fascinated Alice how these small gestures could reveal so much about an individual’s hopes, fears, and inner world.
In one story, a young woman stood at the edge of a river, watching the current drift by as though it carried with it unspoken promises of a distant future. The description was simple: “She lifted her hands above her head, letting the cool, early spring wind play through her fingers.” Yet that image carried emotion enough to fill a lifetime of longing.
Alice closed her eyes, imagining the wind on her skin, and for a moment, she felt transported away from her study to that riverside scene.
Then she opened her eyes again, setting the bookmark between the pages, and raised her gaze to the window.
The sun had sunk lower; the sky had begun to shift to ethereal shades of lavender and gold.
Soon, the garden would blur into silhouettes, and the air would cool.
She reached for the small porcelain teapot on the table beside her.
It held a fragrant chamomile infusion, with just a hint of honey.
Alice poured the steaming liquid into her favorite cup, the one painted with delicate blue forget‑me‑nots.
She paused to inhale the warm steam, allowing its gentle scent to settle her mind. It had become something of a ritual, this tea drinking ritual, a momentary pause between the realms of thought and rest.
Turning back to her anthology, she selected a different story.
This one described an early morning in a busy city: horse drawn carriages rattling over cobblestones, merchants hawking wares at street stalls, and the clamor of voices in unfamiliar tongues.
As she read, Alice imagined herself there: she could almost hear the clip clop of hooves and feel the rough stone underfoot, the weight of her satchel on her shoulder.
Again, she closed her eyes, letting the sounds and textures swirl around her senses until she could scarcely distinguish them from her own reality.
Such was the power of fine writing it created an illusion so vivid, so grounded, that the line between reader and narrator blurred.
By the time she finished the second story, darkness had fallen completely.
The study lamp cast a soft pool of light around her chair.
Beyond the window, the garden was now a shadowy realm, defined only by silhouettes and the glimmer of a single landing moth.
In the distance, a lone streetlamp flickered to life; its orange glow rebounded off dewy leaves, turning them into luminous orbs.
Alice closed the anthology, pressed a finger against the spine, and slid the book into its place on the shelf.
She sat for a moment longer, teacup in hand, simply being.
It was a practice in mindfulness, in appreciating transition.
The end of daylight and arrival of evening, the movement from narrative to reflection.
She allowed herself this small pause before rising to begin the next phase of her evening routine: preparing a light supper, writing a few thoughtful entries in her journal, and perhaps stepping out onto the back porch to breathe beneath a sky of stars.
When she finally stood, the teacup empty, the anthology closed, and the quiet settled deeply over the room, Alice felt a gentle contentment.
Gratitude, even.
For the stories, yes and for the world beyond them, for the tactile, living reality she inhabits.
And so, at the close of day, she gave thanks: for words, for solitude, and for the small wonders that attend each ordinary moment.

Output:

Alice Warren sat beside a wide window in the corner of her study.
The late afternoon light slanted gently across the hardwood floor, illuminating endless rows of books that lined the walls.
She loved the hush of quiet contemplation, the soft rustle of turning pages, and the subtle comfort of stories held within paper and ink.
It was in this exact space that she found solace after a long day of meetings, presentations, and endless email chains.
The silence was not merely an absence of noise; it was a presence in itself, a companion that whispered in comfortable tones and allowed thoughts to drift unencumbered.
Outside, the garden lay in gentle bloom.
Roses of deep crimson and pale pink nodded in the early breeze, while
lavender and thyme filled the afternoon air with fragrant sweetness.
A pair of robins hopped atop the low stone wall, pecking at small insects among the wild clover.
Occasionally, a butterfly orange with black veined wings fluttered past the aging glass, and Alice followed its slow, drifting flight for a moment before returning to her book.
Such ordinary spectacles, when observed with attention, held a profound beauty.
It was a lesson she had learned, early and often: that the marvels of life are seldom grand or flashy; they are small, quiet, and easily overlooked.
Her book, an anthology of short stories from the early twentieth century, lay open on her lap.
The paper was slightly yellowed, but sturdy; the ink, crisp. Each story contained within
had been selected for its faithful representation of time, place, and character.
There was a certain charm in the way authors of that era wove descriptive passages around otherwise trivial actions tying shoelaces, pouring tea, gazing out toward a stormy horizon.
Such attentiveness to detail formed a tapestry of everyday life, and it fascinated Alice how these small gestures could reveal so much about an individual’s hopes, fears, and inner world.
In one story, a young woman stood at the edge of a river, watching the current drift by as though it carried with it unspoken promises of a distant future. The description was simple: “She lifted her hands above her head, letting the cool, early spring wind play through her fingers.” Yet that image
carried emotion enough to fill a lifetime of longing.
Alice closed her eyes, imagining the wind on her skin, and for a moment, she felt transported away from her study to that riverside scene.
Then she opened her eyes again, setting the bookmark between the pages, and raised her gaze to the window.
The sun had sunk lower; the sky had begun to shift to ethereal shades of lavender and gold.
Soon, the garden would blur into silhouettes, and the air would cool.
She reached for the small porcelain teapot on the table beside her.
It held a fragrant chamomile infusion, with just a hint of honey.
Alice poured the steaming liquid into her favorite cup, the one painted with delicate blue forget‑me‑nots.
She paused
to inhale the warm steam, allowing its gentle scent to settle her mind. It had become something of a ritual, this tea drinking ritual, a momentary pause between the realms of thought and rest.
Turning back to her anthology, she selected a different story.
This one described an early morning in a busy city: horse drawn carriages rattling over cobblestones, merchants hawking wares at street stalls, and the clamor of voices in unfamiliar tongues.
As she read, Alice imagined herself there: she could almost hear the clip clop of hooves and feel the rough stone underfoot, the weight of her satchel on her shoulder.
Again, she closed her eyes, letting the sounds and textures swirl around her senses until she could scarcely distinguish them from
her own reality.
Such was the power of fine writing it created an illusion so vivid, so grounded, that the line between reader and narrator blurred.
By the time she finished the second story, darkness had fallen completely.
The study lamp cast a soft pool of light around her chair.
Beyond the window, the garden was now a shadowy realm, defined only by silhouettes and the glimmer of a single landing moth.
In the distance, a lone streetlamp flickered to life; its orange glow rebounded off dewy leaves, turning them into luminous orbs.
Alice closed the anthology, pressed a finger against the spine, and slid the book into its place on the shelf.
She sat for a moment longer, teacup in hand, simply being.
It
was a practice in mindfulness, in appreciating transition.
The end of daylight and arrival of evening, the movement from narrative to reflection.
She allowed herself this small pause before rising to begin the next phase of her evening routine: preparing a light supper, writing a few thoughtful entries in her journal, and perhaps stepping out onto the back porch to breathe beneath a sky of stars.
When she finally stood, the teacup empty, the anthology closed, and the quiet settled deeply over the room, Alice felt a gentle contentment.
Gratitude, even.
For the stories, yes and for the world beyond them, for the tactile, living reality she inhabits.
And so, at the close of day, she gave thanks: for words, for solitude, and for the small wonders that attend each ordinary moment.

Code:

import os
import re
import logging
from logger import configure_logging
import textwrap
import aiohttp
import asyncio
from config import (
    API_URL, API_TIMEOUT, MAX_TOKENS, STOP_SEQUENCES, TEST_MODE,
    REPETITION_PENALTY, TEMPERATURE, TOP_P, TOP_T, SENTENCE_MARKER,
    CHUNK_OVERLAP, OUTPUT_CHUNK_SIZE, TEST_INPUT, TEST_OUTPUT,
    PROCESSED_FILE, POSTPROCESSED_FILE, LINECHECK, TEST_FILE
)

class ParseFile:
    def __init__(self):
        self.output_pointer = 0
        self.input_string = ""
        self.chunk = ""
        self.output_string = ""
        self._cleaned = False
        self.api_url = API_URL
        self.logger = logging.getLogger(__name__)
        self.session = None
        self.input_word_pointer = 0
        self.chunk_word_pointer = 0
        self.input_array = []

    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    def count_words(self, text):
        return len(text.split()) if text.strip() else 0

    def loadchunk(self, word_count):
        words_loaded = 0
        words = []
        while words_loaded < word_count and self.input_word_pointer < len(self.input_array):
            words.append(self.input_array[self.input_word_pointer])
            self.input_word_pointer += 1
            words_loaded += 1

        wordschunk = ' '.join(words)
        self.chunk = (self.chunk + wordschunk).strip()
        if self.chunk:
            self.chunk += ' '
        self.logger.info(f'Loaded {words_loaded} words (input pointer: {self.input_word_pointer})')
        return self.chunk
    
    async def formatchunk1(self, chunktext: str) -> str:
        if self.session is None:
            self.session = aiohttp.ClientSession()
        
        prompt = textwrap.dedent(f"""\
            Your task is to reformat the provided text.
            Strictly adhere to the following rules:
            - Maintain the EXACT original words and their order.
            - NEVER add, delete, rephrase, or summarize any words.
            - Put each complete sentence on its own line.
            - Do NOT merge sentences together.
            - Do NOT let proper names end sentences if they are part of an ongoing thought.
            - Add proper punctuation (periods, question marks, exclamation points) to complete sentences only at their end.
            - Capitalize the first word of each complete sentence.
            - Leave incomplete fragments as-is on their own line.
            - ONLY output the reformatted text. DO NOT include any additional commentary, explanations, or instructions.
            - Ensure there are no extra spaces before or after any punctuation mark.

            Example:
            Input: "the cat sat the dog ran"
            Output: "The cat sat.\nThe dog ran."

            Text: {chunktext}

            Formatted text:""")

        try:
            async with self.session.post(
                API_URL,
                json={
                    "prompt": prompt,
                    "max_tokens": MAX_TOKENS,
                    "temperature": TEMPERATURE,
                    "stop": STOP_SEQUENCES,
                    "repetition_penalty": REPETITION_PENALTY,
                    "top_p": TOP_P,
                    "top_t": TOP_T
                },
                timeout=aiohttp.ClientTimeout(total=API_TIMEOUT)
            ) as response:
                if response.status != 200:
                    error_message = f"API returned non-200 status: {response.status}. Response: {await response.text()}"
                    self.logger.error(error_message)
                    return chunktext
                
                result = await response.json()
                formatted = result.get("choices", [{}])[0].get("text", "").strip()
                return formatted if formatted else chunktext
                
        except Exception as e:
            self.logger.error(f"Error formatting chunk: {str(e)}")
            return chunktext

    def deformat(self, formatted_output):
        protected = formatted_output.replace('\n', SENTENCE_MARKER)
        output = protected.lower()
        output = re.sub(f'[^a-z\\s{re.escape(SENTENCE_MARKER)}]', '', output)
        return output.replace(SENTENCE_MARKER, '\n')

    async def formatlines(self, unformatted_string):
        if LINECHECK:
            return unformatted_string

        if self.session is None:
            self.session = aiohttp.ClientSession()

        lines = unformatted_string.split('\n')
        formatted_lines = []
        
        for line in lines:
            if not line.strip():
                formatted_lines.append('')
                continue
                
            try:
                prompt = textwrap.dedent(f"""\
                    Your task is to punctuate and capitalize the provided line of text.
                    Strictly adhere to the following rules:
                    - Maintain the EXACT original words and their order.
                    - NEVER add, delete, rephrase, or summarize any words.
                    - Add periods, question marks, or exclamation points to punctuate complete sentences only at their end.
                    - Capitalize the first letter of the first word of each complete sentence.
                    - Incomplete sentence fragments must remain as they are, without added punctuation or capitalization unless they are a proper noun.
                    - Only add punctuation at the very end of a complete sentence.
                    - Only capitalize the first word if it starts a sentence.
                    - ONLY output the reformatted text. DO NOT include any additional commentary, explanations, or instructions.
                    - Ensure there are no extra spaces before or after any punctuation mark.

                    Text: {line}

                    Formatted text:""")

                async with self.session.post(
                    self.api_url,
                    json={
                        "prompt": prompt,
                        "max_tokens": MAX_TOKENS,
                        "temperature": TEMPERATURE,
                        "stop": STOP_SEQUENCES,
                        "repetition_penalty": REPETITION_PENALTY,
                        "top_p": TOP_P,
                        "top_t": TOP_T
                    },
                    timeout=aiohttp.ClientTimeout(total=API_TIMEOUT)
                ) as response:
                    if response.status != 200:
                        error_message = f"API returned non-200 status: {response.status}. Response: {await response.text()}"
                        self.logger.error(error_message)
                        formatted_lines.append(line)
                        continue
                    
                    result = await response.json()
                    formatted_line = result.get("choices", [{}])[0].get("text", "").strip()
                    
                    if not formatted_line:
                        self.logger.warning(f"Empty response for line: {line}")
                        formatted_lines.append(line)
                    else:
                        formatted_lines.append(formatted_line)
                        
            except Exception as e:
                self.logger.error(f"Error formatting line: {line}. Error: {str(e)}", exc_info=True)
                formatted_lines.append(line)
        
        return '\n'.join(formatted_lines)

    def preprocess(self, input_file):
        self.input_file = input_file
        self.logger.debug(f'Preprocessing: {self.input_file}')
        try:
            with open(self.input_file, 'r', encoding='utf-8') as f:
                text = f.read()

            if TEST_MODE == "desiredoutput":
                self.input_string = text
                self.input_array = text.split()
                self.textsize = len(text)
                self._cleaned = True
                return text

            text = text.lower()
            text = text.replace("'", "'").replace('"', '"')
            text = text.replace("—", " -- ")
            text = re.sub(r"[^a-z0-9'\-\s]", " ", text)
            text = re.sub(r'\s+', ' ', text).strip()

            words = [word for word in text.split(' ') if word]
            cleaned_text = ' '.join(words)
            self.input_string = cleaned_text
            self.input_array = words
            self.textsize = len(cleaned_text)
            self._cleaned = True
            return cleaned_text

        except Exception as e:
            self.logger.error(f'Preprocessing failed: {e}', exc_info=True)
            raise

    def getdesiredchunk(self, text):
        try:
            target_words = text.strip().split()
            num_words = len(target_words)

            input_words = self.input_string.strip().split()
            for i in range(len(input_words) - num_words + 1):
                if input_words[i:i + num_words] == target_words:
                    start_word_index = i
                    break
            else:
                raise ValueError("Chunk not found in input_string.")

            with open(os.path.join("files", "desired_output.txt"), "r", encoding='utf-8') as f:
                lines = f.readlines()

            word_locations = []
            for line_index, line in enumerate(lines):
                words_in_line = line.strip().split()
                for word_index, word in enumerate(words_in_line):
                    word_locations.append((line_index, word_index))

            if start_word_index + num_words > len(word_locations):
                raise ValueError("Chunk exceeds length of desired output.")

            chunk_locations = word_locations[start_word_index:start_word_index + num_words]
            line_buffer = {}
            for line_index, word_index in chunk_locations:
                line = lines[line_index].strip().split()
                word = line[word_index]
                line_buffer.setdefault(line_index, []).append(word)

            ordered_lines = [line_buffer[i] for i in sorted(line_buffer)]
            desired_chunk = '\n'.join(' '.join(words) for words in ordered_lines)

            return desired_chunk

        except Exception as e:
            self.logger.error(f'getdesiredchunk failed: {e}', exc_info=True)
            return text

    async def format(self, text):
        formatted = ""
        match TEST_MODE:
            case "unformatted":
                formatted =  text
            case "desiredoutput":
                formatted =  self.getdesiredchunk(text)
            case "run":
                formatted =  await self.formatchunk1(text)
            case _:
                formatted = text
        return formatted
    
    def find_first_mismatch(self, str1, str2):
        min_len = min(len(str1), len(str2))
        for i in range(min_len):
            if str1[i] != str2[i]:
                return f"Mismatch at index {i}: '{str1[i]}' != '{str2[i]}'"
        if len(str1) != len(str2):
            return f"Mismatch at index {min_len}: One string is longer"
        return "Strings are identical"

    def split_into_two_chunks(self, text, n):
        try:
            if not text.strip():
                return "", ""
                
            lines = text.splitlines(keepends=True)
            
            word_locations = []
            words_in_lines = []
            for line_index, line in enumerate(lines):
                words_in_line = line.strip().split()
                words_in_lines.append(words_in_line)
                for word_index in range(len(words_in_line)):
                    word_locations.append((line_index, word_index))
            
            if n >= len(word_locations):
                return text, ""
            
            first_chunk_locs = word_locations[:n]
            second_chunk_locs = word_locations[n:]
            
            def build_chunk(locations):
                line_buffer = {}
                for line_index, word_index in locations:
                    word = words_in_lines[line_index][word_index]
                    line_buffer.setdefault(line_index, []).append(word)
                
                ordered_lines = []
                for line_index in sorted(line_buffer):
                    original_line = lines[line_index]
                    line_ending = original_line[len(original_line.rstrip('\r\n')):]
                    reconstructed_line = ' '.join(line_buffer[line_index]) + line_ending
                    ordered_lines.append(reconstructed_line)
                
                return ''.join(ordered_lines)
            
            first_chunk = build_chunk(first_chunk_locs)
            second_chunk = build_chunk(second_chunk_locs)
            
            return first_chunk, second_chunk

        except Exception as e:
            self.logger.error(f'split_into_two_chunks failed: {e}', exc_info=True)
            words = text.split()
            first = ' '.join(words[:n]) if words else ""
            second = ' '.join(words[n:]) if words else ""
            return first, second

    async def process(self, input_file: str):
        self.input_string = self.preprocess(input_file)
        self.cleanedinput_file = PROCESSED_FILE
        self.output_file = POSTPROCESSED_FILE
        self.logger.debug(f'Processing to: {self.output_file}')
            
        try:
            input_string = self.input_string
            output_string = ""
            context_window = ""
            chunk_size = OUTPUT_CHUNK_SIZE
            overlap_size = CHUNK_OVERLAP
            total_chunk_size = chunk_size + overlap_size
                
            first_chunk, remaining_input = self.split_into_two_chunks(input_string, total_chunk_size)
            context_window = await self.format(first_chunk)
                
            while remaining_input:
                output_part, overlap_part = self.split_into_two_chunks(context_window, chunk_size)
                output_string += output_part
                next_chunk, remaining_input = self.split_into_two_chunks(remaining_input, chunk_size)
                context_window = await self.format(overlap_part + " " + next_chunk)

            output_string += context_window

            with open(TEST_INPUT, "w", encoding='utf-8') as f:
                f.write(self.input_string)
            with open(TEST_OUTPUT, "w", encoding='utf-8') as f:
                f.write(output_string)

            if TEST_MODE == "desiredoutput":
                with open(os.path.join("files", "desired_output.txt"), "r", encoding='utf-8') as f:
                    desiredcontent = f.read()
                result = self.find_first_mismatch(desiredcontent, output_string)
                print(result)

            return output_string

        except Exception as e:
            self.logger.error(f'Processing failed: {e}', exc_info=True)
            raise

async def main():
    configure_logging()
    logger = logging.getLogger('main')
    try:
        async with ParseFile() as parser:
            await parser.process(TEST_FILE)
        logger.info("Processing completed successfully")
    except Exception as e:
        logger.error(f"Processing failed: {str(e)}", exc_info=True)
        raise

if __name__ == "__main__":
    asyncio.run(main())

Problem:

It appears chunks are not being combined correctly.  
The other test path 'unformatted' should be examined to definitivly determine where the bug is.
It may be in chunking or it may be where chunks are combined.  I suspect it is where chunks are combined.